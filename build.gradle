plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
}

group = 'com.jerodis'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.assertj:assertj-core:3.20.2'
	testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:0.5.7'
}

//tasks.named('test') {
//	useJUnitPlatform()
//}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

sonar {
	properties {
		property("sonar.projectKey", "order")
		property("sonar.token", "sqp_f47bdcb8ce1f7c993e91a611db18e8c6be96d963")
		property("sonar.host.url", "http://localhost:9000")

		property "sonar.sources", "src" // 소스 경로
		property "sonar.language", "java" // 언어
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.profile", "Sonar way" // 소나큐브에서 적용할 프로필(분석할 수준 설정)
		property "sonar.java.binaries", "${buildDir}/classes" // 자바 클래스 파일위치
		property "sonar.test.inclusions", "**/*Test.java" // 코드 분석에 사용할 테스트 소스
		property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**" // 테스트커버리지에서 제외할 파일, 예제에선 정적 js 파일과 queryDSL Q파일 제외
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml" // jacoco 플러그인의 결과파일
	}
}


jacoco {
	toolVersion = '0.8.7'
	// reportsDir = ${project.reporting.baseDir}/jacoco - 따로 설정해 주지 않을 경우 기본 경로
}

jacocoTestReport {
	reports {
		html.enabled true // html 만들어 - 로컬에서 쉽게 보기 위함
		xml.enabled true // xml 만들어 - 소나큐브 연동 위함
		csv.enabled false // csv 안 만들어

		// xml.destination file("${buildDir}/jacoco/result.xml") // 여기 저장할 것이라는 뜻.
	}
	// 코드 커버리지 기준을 만족해야지 build 성공
//	finalizedBy 'jacocoTestCoverageVerification'
}
//
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 이 rule을 적용할 것이다.
			element = 'CLASS' // class 단위로

			// 브랜치 커버리지 최소 50%
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}

			// 라인 커버리지 최소한 80%
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수 최대 300라인
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 300
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = []
		}
	}
}

task testCoverage(type: Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}